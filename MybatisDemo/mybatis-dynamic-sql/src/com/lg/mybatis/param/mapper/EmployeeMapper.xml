<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lg.mybatis.param.mapper.EmployeeMapper">
    <select id="query" resultType="employee">
        select id,name,sn,salary,deptId from employee
        <where>
            <if test="minSalary!=null">
                salary>= #{minSalary}
            </if>
        </where>
    </select>

    <select id="query2" resultType="employee">
        select id,name,sn,salary,deptId from employee
        <where>
            <if test="minSalary!=null">
                and salary>= #{minSalary}
            </if>
            <if test="maxSalary!=null">
                and salary &lt;= #{maxSalary}
            </if>

            <choose>
                <when test="deptId > 0">and deptId=#{deptId}</when>
                <otherwise>and deptId is not null</otherwise>
            </choose>
        </where>

    </select>



    <delete id="batchDelete">
        <!--
            foreach元素：
                collection属性：表示对哪一个集合或数组做迭代
                                    如果参数是数组类型，此时Map的key为array
                                    如果参数是集合类型，此时Map的key为list
                                    我们可以在参数上使用Param注解，规定死Map中的key是什么
                open属性：在迭代集合前，拼接什么符号
                close属性：在迭代集合之后，拼接什么符号
                separator属性：在迭代集合元素时，每个元素之间使用什么符号分开
                item属性：被迭代的每一个元素的变量
                index属性：迭代的索引
        -->
        delete from employee where id in
        <foreach collection="ids" item="id" open="(" close=")"  separator=",">
            #{id}
        </foreach>
    </delete>

    <insert id="batchSave">
        insert into employee(name,sn,salary,deptId) values
        <foreach collection="emps" item="emp" separator=",">
            (#{emp.name},#{emp.sn},#{emp.salary}, #{emp.deptId})
        </foreach>
    </insert>


</mapper>